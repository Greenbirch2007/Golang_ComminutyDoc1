
反射的引子

有时候需要写一个函数，这个函数有能力统一处理各种值类型，而这些类型可能
无法共享一个接口。也可能布局未知。
也有可能这个类型在我们涉及函数时还不存在，这时候我们就可以用到反射

1.空接口可以存储任意类型的变量，
如何知道这个空接口保存的数据的类型是什么？值是什么？


1. 可以使用类型断言
2.可以使用反射实现。也就是在程序运行时动态的获取
一个变量的类型信息和值信息


2. 把结构体序列化成json字符串，自定义结构体Tab标签
的时候就用到了反射

package main

import (
	"encoding/json"
	"fmt"
)

type Student struct {
	ID int `json:"id"`
	Gender string  `json:"gender"`
	Name string `json:"name"`
	Sno string `json:"sno"`

}

func main(){
	var s1 = Student{
		ID:     1,
		Gender: "男",
		Name:   "李四",
		Sno:    "s001",
	}
	fmt.Println("aa")
	var s,_ = json.Marshal(s1)
	jsonStr := string(s)
	fmt.Println(jsonStr)
}

3. 后期使用ORM框架，这个ORM框架就用到了反射技术

ORM:对象关系映射，是通过使用描述对象和数据库之间映射
元数据，将面向对象语言程序中的对象自动持久化到关系数据库中


2. 反射的基本姐好啊


反射是指在程序运行期间对程序本身进行访问和修改的能力。
正常情况下在编译时，变量被转换为内存地址，变量名不会
被编译器写入到可执行部分。在运行程序是，程序无法获取自身的
信息。支持反射的语言可以在程序编译期间将变量的反射信息
入字段名称，类型信息，结构体信息系等整合到可执行未见中
并给程序提供接口访问反射信息，这样就可以
在程序运行期获取类型的反射信息，并且有能力修改它们


go可以实现的功能

1.反射可以在程序运行期间动态的访问变量的各种信息，比如
变量的类型，类别


2. 如果是结构体，通过反射还可以获取结构体本身的信息
比如结构体的字段，结构体的方法

3. 通过反射，可以修改变量的值，可以调用关联的方法

golang语言的变量是分为两部分的


类型信息：预先定义好的元信息
值信息：程序运行过程中可动态变化的


在go预压你的反射机制中，任何接口值都由是一个具体类型
和具体类型的值两部分组成的


在golang语言中反射的相关功能由内置的reflect包提供
任意接口值在反射中都可以理解为由reflect.Type和reflect.Value
两部分组成，并且reflect报提供了
reflect.TypeOf和reflect.ValueOf两个重要函数
来获取任意对象的Value和Type


3. reflect.TypeOf()获取任意值得类型对象

在go语言中，使用reflect.TypeOf()函数可以接受任意interface{}参数
可以获得任意值得类型对象(reflect.Type)程序通过类型对象
可以访问任意值的类型信息

package main

import (
	"fmt"
	"reflect"
)

//通过反射获取任意变量的类型
//定义成空接口就可以接收任意类型的变量

type myInt int
type Person struct {
	Name string
	Age int
}


func reflectFn(x interface{}){
	v:= reflect.TypeOf(x)
	fmt.Println(v)
}
func main(){

	var e myInt =36
	var f =Person{
		Name: "张三",
		Age:  0,
	}
	reflectFn(e)//main.myInt
	reflectFn(f) //main.Person
	var h = 26
	reflectFn(&h)//*int







}


type Name和type Kind

在反射中关于类型还划分为两种：类型(Type)和种类(Kind)
因为在GO语言中我们可以使用type关键字构造很多自定义类型，
而种类(Kind)就是指底层的乐行
但在反射中，当需要区分指针，结构体等大品种的
类型时，就会用到种类(Kind)
例如，
我们定义了两个指针类型和两个结构体类型，通过反射查看它们
的类型和种类


golang中的反射中像数组，切片，Map，指针等类型的变量
它们的.Name()都是返回空


4. reflect.ValueOf()

reflect.ValueOf()返回的是re


flect.Value类型，其中包含了
原始值的值信息，
reflect.Value与原始值之间可以互相转换


reflect.Value类型提供的获取原始值的方法如下


interface{}
interface()   将值以interface{}类型犯规


package main

import (
	"fmt"
	"reflect"
)

//通过反射获取任意变量的类型
//定义成空接口就可以接收任意类型的变量

type myInt int
type Person struct {
	Name string
	Age int
}


func reflectFn(x interface{}){
	v:= reflect.TypeOf(x)
	v.Name()//获取类型名称,指的是
	v.Kind()//获取种类
	fmt.Printf("%v %v %v \n",v,v.Name(),v.Kind())
}
func main(){

	var e myInt =36
	var f =Person{
		Name: "张三",
		Age:  0,
	}
	reflectFn(e)//main.myInt
	reflectFn(f) //main.Person
	var h = 26
	reflectFn(&h)//*int
	var i =[3]int{1,3,6}
	var j =[]int{1,3,6}
	reflectFn(i)
	reflectFn(j)








}


package main

import (
	"fmt"
	"reflect"
)

//通过反射获取任意变量的类型
//定义成空接口就可以接收任意类型的变量

type myInt int
type Person struct {
	Name string
	Age int
}


func reflectFn(x interface{}){
	////利用类型断言可以实现把形参的空接口类型转化为实参的int
	//b,_ := x.(int)
	//var num = 10+b
	//
	//fmt.Println(num)

	//可以通过反射来说实现形参空接口类型到实参具体的int类型的转换
	v := reflect.ValueOf(x)
	var n = v.Int()+2 //通过v.Int()获取原始值
	fmt.Println(n)
}
func main(){
	var a = 3
	reflectFn(a)









}


4. 通过反射设置变量的值


func (v Value) SetBool(x bool)


func refleactSetValue (x interface{}){
	x  := reflect.ValueOf(x)
	if x.Kind() == reflect.int64{
		v.Setint(200) //修改的是副本，reflect包会引发panic

https://t3.jyimg.com/ae/ee/2fd64bc3f65204c19c4aq8cb79a0/177804467d.jpg


package main

import (
	"fmt"
	"reflect"
)

func reflectSetValue(x interface{}){
	//*x = 66//.\g.go:6:2: invalid indirect of x (type interface {})
	v := reflect.ValueOf(x)
	//fmt.Println(v.Kind())//ptr
	//fmt.Println(v.Elem().Kind()) //int64 如果传入的是指针类型，就用E了吗（）

	if v.Elem().Kind() == reflect.Int64{
		v.Elem().SetInt(88)
	}

	if v.Elem().Kind() == reflect.String{
		v.Elem().SetString("helel")
	}


}



func main(){
	var a int64 =100
	reflectSetValue(&a)
	fmt.Println(a)

	var b string = "sss"
	reflectSetValue(&b)
	fmt.Println(b)
}