1. 线程和进程
进程就是程序在操作系统中的一次执行过程，是系统进行资源分配和调度的基本单位
进程是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每个进程都有一个自己的
地址空间
一个进程至少有5种基本状态，初始态，执行态，等待态，就绪态，终止态

通俗讲，进程就是一个正在执行的程序

线程是进程的一个执行实例，是程序执行的最小单元，它是比进程更小的能独立运行的基本单位

一个进程可以创建多个线程，同一个进程中的多个线程可以并发执行，一个程序要运行的话至少有一个进程


2. 并发和并行（并发和并行都是针对多线程而言的）

并发：多个线程同时竞争一个位置，竞争到才可以执行，每一个时间段只有
一个线程在执行

并行：多个线程可以同时执行，每个时间段，可以有多个多个线程同时执行

通俗讲，
多线程程序在单核CPU上面运行就是并发
多线程程序在多核CPU上运行就是并行

如果线程数大于CPU核数，则多线程程序在多个CPUshagnm 运行既有并发又有滨兴

并发的特点

（1） 多个任务作用在一个CPU上面
(2) 同一时间点只能有一个任务执行
(3) 同一时间段内执行多个任务

3. golang中的协程(goroutine)以及主线程


golang中的主线程(可以理解为线程、或进程)在一个golang程序的主线程上
可以起多个协程。golang中多协程可以实现并行或并发


协程：可以理解为用户级别线程，这是对内核透明的，
也就是系统并不知道协程的存在
是一个完全由用户自己的程序进行调度的。
golang的一个特色就是从语言层面原生支持协程
在函数或方法前面go关键字就可以创建一个协程
可以说golang中的协程就是goroutine

多协程和多线程：golang中每个goroutine(协程)默认占用内存比java,c的线程
小
os线程(操作系统线程)一半都有固定的栈内存(通常为2MB)，一个goroutine（协程）
占用内存非常小，至于2kb
多协程goroutine切换调度开销方面远比线程更少

4. goroutine的使用以及sync.WaitGroup

并行执行需求：

在主线程(可以理解成进程)中，开启一个goroutine,该协程每隔50毫秒数出
"你好golang"
在主线程中也每隔50毫秒数出"hell golang"，输出10次后，退出程序
要求主线程和goroutine同时执行

main()函数就是主线程

有一个问题就是当主线程运行速度比协程快时，主进程结束了，不管协程
是否结束都终止了。这是goroutine的一个缺点

为了保证程序可以顺利执行
想让协程执行完毕后执行主进程退出，这是还是用sync.WaitGroup等待协程执行完毕

syc.WaitGroup可以实现主线程等待协程执行完毕